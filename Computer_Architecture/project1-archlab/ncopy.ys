
# modified:
# 1. Code scheduling to prevent load/use case(data hazard). reason: the load/use case will bring stalls to the pipeline due to the data hazard,so we do code scheduling to prevent this situation to the fullest extent.
# 2. Loop unrolling to 8,4,3,2,1. reason: because the control hazard for predict error exists, we do loop unrolling to decrease the predict errors.
# 3. Take advantage of two registers %esi and %edi to prevent data hazard. reason: For we've already added iaddl to the pipeline,we have two free registers.We find the mrmovl (%ebx), %esi; rmmovl %esi, (%ecx) situation exist.It's a kind of load use but cannot be improved by only %esi,so we use two registers %edi,%esi to prevent load/use case in a further extent. 
# 

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax			# count = 0;
	iaddl $-8, %edx
	jl pre_len4	
len8:						# loop unrolling with len = 8
	mrmovl (%ebx), %esi		# use two registers to reduce data hazard
	mrmovl 4(%ebx), %edi 
	rmmovl %esi, (%ecx)
	andl %esi, %esi 
	rmmovl %edi, 4(%ecx)	
	jle len8_1			
	iaddl $1, %eax		
len8_1:
	andl %edi, %edi
	jle len8_2
	iaddl $1, %eax 
len8_2:
	mrmovl 8(%ebx), %esi
	mrmovl 12(%ebx), %edi 
	rmmovl %esi, 8(%ecx)
	andl %esi, %esi 
	rmmovl %edi, 12(%ecx)	
	jle len8_3
	iaddl $1, %eax 
len8_3:
	andl %edi, %edi
	jle len8_4
	iaddl $1, %eax 
len8_4:
	mrmovl 16(%ebx), %esi
	mrmovl 20(%ebx), %edi 
	rmmovl %esi, 16(%ecx)
	andl %esi, %esi 
	rmmovl %edi, 20(%ecx)	
	jle len8_5
	iaddl $1, %eax 
len8_5:
	andl %edi, %edi
	jle len8_6
	iaddl $1, %eax 
len8_6:
	mrmovl 24(%ebx), %esi
	mrmovl 28(%ebx), %edi 
	rmmovl %esi, 24(%ecx)
	andl %esi, %esi 
	rmmovl %edi, 28(%ecx)	
	jle len8_7
	iaddl $1, %eax 
len8_7:
	andl %edi, %edi
	jle len8_8
	iaddl $1, %eax 
len8_8:
    iaddl $32, %ebx
	iaddl $32, %ecx 
	iaddl $-8, %edx 

	jge len8

pre_len4:	
	iaddl $4, %edx 
	jl pre_final
	
len4:							# loop unrolling with len = 4
	mrmovl (%ebx), %esi
	mrmovl 4(%ebx), %edi 
	rmmovl %esi, (%ecx)
	andl %esi, %esi 
	rmmovl %edi, 4(%ecx)		
	jle len4_1		
	iaddl $1, %eax				# count++
len4_1:
	andl %edi, %edi 
	jle len4_2
	iaddl $1, %eax 
len4_2:
	mrmovl 8(%ebx), %esi
	mrmovl 12(%ebx), %edi 
	rmmovl %esi, 8(%ecx)
	andl %esi, %esi 
	rmmovl %edi, 12(%ecx)	
	jle len4_3
	iaddl $1, %eax 
len4_3:
	iaddl $16, %ebx
	iaddl $16, %ecx
	andl %edi, %edi 
	jle final
	iaddl $1, %eax 
	jmp final 
pre_final:
	iaddl $4, %edx
	
final:						
	iaddl $-1, %edx
	jl Done
	je len1 
	iaddl $-1, %edx 
	je len2 
	jmp len3

len3:							# loop unrolling with len = 3
	mrmovl (%ebx), %esi
	mrmovl 4(%ebx), %edi 
	rmmovl %esi, (%ecx)
	andl %esi, %esi 
	rmmovl %edi, 4(%ecx)	
	jle len3_1
	iaddl $1, %eax 
len3_1:
	andl %edi, %edi 
	jle len3_2
	iaddl $1, %eax
len3_2:
	mrmovl 8(%ebx), %esi
	rmmovl %esi, 8(%ecx)
	andl %esi, %esi 
	jle len3_3
	iaddl $1, %eax 
len3_3:
	jmp Done

len2:							# loop unrolling with len = 2
	mrmovl (%ebx), %esi
	mrmovl 4(%ebx), %edi 
	rmmovl %esi, (%ecx)
	andl %esi, %esi 
	rmmovl %edi, 4(%ecx)	
	jle len2_1
	iaddl $1, %eax 
len2_1:
	andl %edi, %edi 
	jle len2_2
	iaddl $1, %eax
len2_2:
	jmp Done 

len1:
	mrmovl (%ebx), %esi
	rmmovl %esi, (%ecx)
	andl %esi, %esi 
	jle len1_1
	iaddl $1, %eax 
len1_1:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
